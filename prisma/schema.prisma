// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING
  CLOSED
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  PENDING
  PAID
  EXPIRED
  CANCELLED
  FAILED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  EXPIRED
}

enum PaymentMethod {
  TELEGRAM_PAY
  BANK_CARD
  CRYPTO
  OTHER
}

model Payment {
  id           String         @id @default(uuid())
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  amount       Float
  currency     String         @default("RUB")
  status       PaymentStatus  @default(PENDING)
  method       PaymentMethod
  externalId   String?        // External payment ID from payment provider
  orderId      String?        // Our internal order ID
  description  String?
  metadata     String?        // Store any additional payment data as JSON string
  subscription Subscription[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum CrmProvider {
  AMOCRM
  BITRIX24
  TELEGA_VPN // If TelegaVPN acts as a CRM source
}

model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  password          String
  name              String?
  role              String          @default("USER")
  telegramId        String?         @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  bots              Bot[]
  tickets           Ticket[]
  subscriptions     Subscription[]
  referralCode      String?         @unique
  referredBy        Int?
  referrer          User?           @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals         User[]          @relation("UserReferrals")
  referralLinks     ReferralLink[]
  referralStats     ReferralStats?
  crmConnections    CrmConnection[]
  createdPromoCodes PromoCode[]
  payments          Payment[]
}

model Bot {
  id            Int            @id @default(autoincrement())
  token         String         @unique
  username      String         @unique
  name          String
  link          String
  isActive      Boolean        @default(true)
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  tickets       Ticket[]
  crmUsers      CrmUser[]
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Ticket {
  id         Int             @id @default(autoincrement())
  subject    String
  message    String
  status     TicketStatus    @default(OPEN)
  botId      Int
  bot        Bot             @relation(fields: [botId], references: [id])
  userId     Int
  user       User            @relation(fields: [userId], references: [id])
  telegramId String
  messages   TicketMessage[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model TicketMessage {
  id          Int      @id @default(autoincrement())
  message     String
  isFromAdmin Boolean  @default(false)
  ticketId    Int
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  createdAt   DateTime @default(now())
}

model CrmUser {
  id         Int      @id @default(autoincrement())
  telegramId String   @unique
  username   String?
  firstName  String?
  lastName   String?
  botId      Int
  bot        Bot      @relation(fields: [botId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subscription {
  id           Int                @id @default(autoincrement())
  userId       Int
  user         User               @relation(fields: [userId], references: [id])
  botId        Int
  bot          Bot                @relation(fields: [botId], references: [id])
  plan         SubscriptionPlan
  status       SubscriptionStatus @default(PENDING)
  amount       Float
  paymentId    String?
  payment      Payment?           @relation(fields: [paymentId], references: [id])
  periodStart  DateTime?          // When the subscription period starts
  periodEnd    DateTime?          // When the subscription period ends
  isRecurring  Boolean            @default(false) // For future use
  metadata     String?            // Store any additional subscription data as JSON string
  invoiceId    String?
  externalId   String?            // External subscription ID from payment provider
  cancelledAt  DateTime?
  cancelledBy  Int?               // User ID who cancelled the subscription
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model ReferralLink {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  clicks      Int      @default(0)
  conversions Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ReferralStats {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  user            User      @relation(fields: [userId], references: [id])
  totalReferrals  Int       @default(0)
  activeReferrals Int       @default(0)
  totalBonus      Float     @default(0)
  pendingBonus    Float     @default(0)
  lastBonusDate   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model CrmConnection {
  id           Int         @id @default(autoincrement())
  userId       Int         @unique // One connection per user for now
  user         User        @relation(fields: [userId], references: [id])
  provider     CrmProvider
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  domain       String?
  otherData    String? // Changed from Json? to String? to store encrypted data
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isActive     Boolean     @default(true)
}

model PromoCode {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  discount  Float // Discount amount or percentage
  type      String // "PERCENTAGE" or "FIXED"
  maxUses   Int? // Maximum number of times the code can be used
  usedCount Int       @default(0)
  expiresAt DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy Int // Admin user ID who created the code
  creator   User      @relation(fields: [createdBy], references: [id])
}
