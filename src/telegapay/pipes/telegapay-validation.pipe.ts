import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException, Logger } from '@nestjs/common';
import { validate } from 'class-validator';
import { plainToClass } from 'class-transformer';

@Injectable()
export class TelegapayValidationPipe implements PipeTransform<any> {
  private readonly logger = new Logger(TelegapayValidationPipe.name);

  async transform(value: any, { metatype }: ArgumentMetadata) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–∞—Ç–∏–ø–∞ –∏–ª–∏ —ç—Ç–æ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ç–∏–ø, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    if (!metatype || !this.toValidate(metatype)) {
      return value;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.logger.debug(`üîç Validating input data: ${JSON.stringify(value)}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ value –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
    if (typeof value !== 'object' || value === null) {
      this.logger.debug(`‚ùå Invalid input type: expected object, got ${typeof value}`);
      throw new BadRequestException('Invalid input: expected JSON object');
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ DTO
    let object;
    try {
      object = plainToClass(metatype, value);
    } catch (error) {
      if (error instanceof Error) {
        this.logger.debug(`‚ùå Failed to transform input data: ${error.message}`);
      } else {
        this.logger.debug('‚ùå Failed to transform input data: Unknown error');
      }
      throw new BadRequestException('Invalid input format');
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
    const errors = await validate(object, {
      whitelist: true, // –£–¥–∞–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ DTO
      forbidNonWhitelisted: true, // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
      transform: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–∏–ø—ã
      validateCustomDecorators: true,
    });

    if (errors.length > 0) {
      const errorMessages = errors.map(error => {
        const constraints = error.constraints;
        return constraints ? Object.values(constraints).join(', ') : 'Validation error';
      });
      
      this.logger.debug(`‚ùå Validation failed: ${errorMessages.join('; ')}`);
      throw new BadRequestException(`Validation failed: ${errorMessages.join('; ')}`);
    }

    this.logger.debug(`‚úÖ Validation successful for ${metatype.name}`);
    return object;
  }

  private toValidate(metatype: Function): boolean {
    const types: Function[] = [String, Boolean, Number, Array, Object];
    return !types.includes(metatype);
  }
}